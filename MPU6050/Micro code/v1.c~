/*****************************************************
This program was produced by the
CodeWizardAVR V2.05.3 Standard
Automatic Program Generator
© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
http://www.hpinfotech.com

Project : 
Version : 
Date    : 7/27/2017
Author  : Admin
Company : 
Comments: 


Chip type               : ATmega8
Program type            : Application
AVR Core Clock frequency: 8.000000 MHz
Memory model            : Small
External RAM size       : 0
Data Stack size         : 512
*****************************************************/

#include <mega8.h>

#include <delay.h>
#include <MPU_lib.h>
#include <math.h>
#include <i2c_lib.h>



// Declare your global variables here
unsigned char str[15];
float gyro_xrs,gyro_yrs,gyro_zrs,accel_xg,accel_yg,accel_zg;
signed int gyro_x,gyro_y,gyro_z,accel_x,accel_y,accel_z;
float roll,pitch;

#define MPU6050_GXOFFSET -27
#define MPU6050_GYOFFSET -2
#define MPU6050_GZOFFSET 22


void main(void)
{
// Declare your local variables here

// Input/Output Ports initialization
// Port B initialization
// Func7=In Func6=In Func5=In Func4=In Func3=In Func2=Out Func1=Out Func0=In 
// State7=T State6=T State5=T State4=T State3=T State2=0 State1=0 State0=T 
PORTB=0x00;
DDRB=0x00;

// Port C initialization
// Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
// State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
PORTC=0x00;
DDRC=0x00;

// Port D initialization
// Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
// State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
PORTD=0x00;
DDRD=0x00;

// Timer/Counter 0 initialization
// Clock source: System Clock
// Clock value: Timer 0 Stopped
TCCR0=0x00;
TCNT0=0x00;

// Timer/Counter 1 initialization
// Clock source: System Clock
// Clock value: 125.000 kHz
// Mode: Fast PWM top=0x03FF
// OC1A output: Non-Inv.
// OC1B output: Non-Inv.
// Noise Canceler: Off
// Input Capture on Falling Edge
// Timer1 Overflow Interrupt: Off
// Input Capture Interrupt: Off
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
TCCR1A=0x00;
TCCR1B=0x00;
TCNT1H=0x00;
TCNT1L=0x00;
ICR1H=0x00;
ICR1L=0x00;
OCR1AH=0x00;
OCR1AL=0x00;
OCR1BH=0x00;
OCR1BL=0x00;

// Timer/Counter 2 initialization
// Clock source: System Clock
// Clock value: Timer2 Stopped
// Mode: Normal top=0xFF
// OC2 output: Disconnected
ASSR=0x00;
TCCR2=0x00;
TCNT2=0x00;
OCR2=0x00;


// External Interrupt(s) initialization
// INT0: Off
// INT1: Off
MCUCR=0x00;

// Timer(s)/Counter(s) Interrupt(s) initialization
TIMSK=0x00;


// USART initialization
// Communication Parameters: 8 Data, 1 Stop, No Parity
// USART Receiver: On
// USART Transmitter: On
// USART Mode: Asynchronous
// USART Baud Rate: 9600
UCSRA=0x00;
UCSRB=0x18;
UCSRC=0x86;
UBRRH=0x00;
UBRRL=0x33;

// Analog Comparator Input Capture by Timer/Counter 1: Off
ACSR=0x80;
SFIOR=0x00;



// SPI initialization
// SPI disabled
SPCR=0x00;

// TWI initialization
// TWI disabled
TWCR=0x00;

// Global enable interrupts


mpu_Initialize();


while (1)
      {
    mpu_BurstRead(MPU6050_REG_ACCEL_XOUT_H,14,str);

    accel_x=(str[0]<<8)|str[1];      
    accel_y=(str[2]<<8)|str[3];      
    accel_z=(str[4]<<8)|str[5];       

    accel_xg=accel_x/8192.0;                              // convert to g (m/s*2)
    accel_yg=accel_y/8192.0;
    accel_zg=accel_z/8192.0;
    
    gyro_x=(str[8]<<8)|str[9];
    gyro_y=(str[10]<<8)|str[11];      
    gyro_z=(str[12]<<8)|str[13];

    gyro_xrs= (gyro_x-(MPU6050_GXOFFSET))/16.4;           // convert to (deg / sec)
    gyro_yrs= (gyro_y-(MPU6050_GYOFFSET))/16.4;
    gyro_zrs= (gyro_z-(MPU6050_GZOFFSET))/16.4;


    roll=atan2(accel_yg,accel_zg);
    roll=roll*57.32;                                      

    pitch=atan2(accel_xg,accel_zg);
    pitch=pitch*57.32;    


    delay_ms(100);
      
      }
}
//============================================================================================
